:coffeescript

  window.NAME = "meter"
  window.VERSION = "1.0"
  window.DEFAULT_EVENTS = "SQUEEZE NO_SQUEEZE UN_SQUEEZE SQUEEZE_HOLD HIGH_PRESSURE"

  window.SEGMENTS = 6
  window.GAP = 10
  window.UNIT = "REPS"
  window.VALUE = 6
  window.SIZE = 150
  # Sound Scheme
  window.STARTUP = "Kettle-Drums"
  window.SOUND = "Tin-Drum-Pop"
  # window.CONFIRM = "Wobble-Attack"  
  # window.SOUND = "Pleasant-Tone"
  window.CONFIRM = "Kettle-Joy"
  window.FONT = "Arial"

  window.playSound = (name)->
    $("#" + name).mousedown()
    _.delay (()-> $("#" + name).mouseup()), 1000


  $ -> 
    $(document).on "METER", (event, message)->
      _.each message, (value, prop)->
        prop = prop.toUpperCase()
        if not _.isUndefined(window[prop])
          window[prop] = value
      animate()

    _.each $('button.sound'), (btn)->
      $(btn).easyAudioEffects
        mp3 : "/audio/"+$(btn).attr('id')+".wav"
        eventType : "click"
        playType : "oneShotPolyphonic"

 
    dt = new PaperDesignTool
      canvas: $("canvas")

    draw = ()->
      # MAKE STRUCTURE
      circ = new paper.Path.Circle
        radius: SIZE
        center: paper.view.center
        strokeWidth: 40
      circ.rotate(-90)
      # INSET
      start = circ.length*1/10
      end = circ.length*9/10

      progress = _.map _.range(start, end, 1), (pos, i)-> return circ.getPointAt(pos)

      progBorder = new paper.Path
        segments: progress
        strokeColor: "#111"
        strokeWidth: 40

      progIsland = new paper.Path
        segments: progress
        strokeColor: "#111"
        strokeWidth: 35

      bar_length = progIsland.length - (SEGMENTS - 1) * GAP
      step_length = bar_length/SEGMENTS

      progIsland.dashArray = [step_length, GAP]

      current = step_length * VALUE + (GAP-1) * VALUE

      current = if current > progIsland.length then progIsland.length else current
      
      progress = _.map _.range(0, current, 1), (pos, i)-> return progIsland.getPointAt(pos)
      progCurrent = new paper.Path
        segments: progress
        # strokeColor: "yellow"
        strokeWidth: 35
        dashArray: [step_length, GAP]

      progCurrent.strokeColor = 
        gradient:
          stops: [
            [
              '#FAE774'
              0.80
            ]
            [
              '#EF8F35'
              # "red"
              0.92
            ]
            [
              '#EF8F35'
              # "red"
              0.98
            ]
            [
              '#FAE774'
              1
            ]
          ]
          radial: true
        origin: circ.bounds.center
        destination: circ.bounds.topCenter.add(new paper.Point(0, -15))

  
      # TEXT
      text = new paper.PointText
        content: VALUE
        fillColor: 'white'
        fontFamily: FONT
        fontWeight: 'bold'
        fontSize: 200
      text.pivot = text.bounds.center
      text.position = paper.view.center
      paper.view.update()
      unit = new paper.PointText
        content: UNIT
        fillColor: '#EF8F35'
        fontFamily: FONT
        fontWeight: 'bold'
        fontSize: 40
      unit.pivot = unit.bounds.topCenter.add(new paper.Point(0, 50))
      unit.position = text.bounds.bottomCenter
      paper.view.update()

    animate = ()->
      console.log "RENDERING", window.VALUE
      # window.VALUE = window.VALUE + 1
      dt.clear()
      draw()
      if VALUE == 0
        playSound(STARTUP)
      if VALUE == SEGMENTS
        playSound(CONFIRM)
        window.VALUE = 0
      
      playSound(SOUND)
    $(".server-control").on "submit", ()->
      draw()
      # _.each _.range(0, 5, 1), (i)->
      #   _.delay(animate, (i + 1) * 400)

  class window.PaperDesignTool
    constructor: (ops)->
      # super ops
      console.log "âœ“ Paperjs Functionality"
      this.name = "siloseam_design"
      @setup(ops)
      @hello()

    setup: (ops)->
      canvas = ops.canvas[0]
      $(canvas)
        .attr('width', ops.canvas.parent().width())
        .attr('height', ops.canvas.parent().height())
      window.paper = new paper.PaperScope
      loadCustomLibraries()
      paper.setup canvas
      paper.view.zoom = 1
      
      $(canvas)
        .attr('width', ops.canvas.parent().width())
        .attr('height', ops.canvas.parent().height())
    hello: ()->
      
    clear: ->
      paper.project.clear()

#controls.centered
  .ui.segment.attached#server-control
    %form.ui.form.server-control.tiny.equal.width
      .three.fields
        .field
          %label CLOUD
          .ui.labeled.input
            .ui.label ws://   
            %input.param{type:"text", name:"host", value:"162.243.120.86"}
        .field
          %label PORT
          %input.param{type:"number", name:"port", value: 3001}
        .field
          %label &nbsp;
          %button.connect.blue.ui.button.small.fluid{type:"submit"}
            CONNECT


  %button.sound#Kettle-Joy Kettle-Joy
  %button.sound#Tin-Drum-Pop Tin-Drum-Pop
  %button.sound#Wood-Block Wood-Block  
  %button.sound#Pleasant-Tone Pleasant-Tone 
  %button.sound#Kettle-Drums Kettle-Drums 

  

:css
  
  html, body{
    width: 100%;
    height: 100%;
    overflow: hidden;
    margin: 0;
    background: black;
  }
  #controls{
    position: absolute;
    top: 0;
    left: 0;
    z-index: 100;
    width: 100%;
    height: 100%;
  }
  canvas{
    background: black;
  }

